(in-package :stumpwm)

(setq *startup-message* "Welcome back, Jason")

;; (global "XF86MonBrightnessUp" "increase-brightness")
;; (global "XF86MonBrightnessDown" "decrease-brightness")
;; (global "XF86AudioRaiseVolume" "increase-volume")
;; (global "XF86AudioLowerVolume" "decrease-volume")
;; (global "XF86AudioMute" "mute")
;; (global "XF86AudioNext" "next-song")
;; (global "XF86AudioPrev" "prev-song")
;; (global "XF86AudioStop" "stop-song")
;; (global "XF86AudioPlay" "play-song")
;; (global "Print" "screenshot")

(setf *mouse-focus-policy* :click) 
(setf *window-border-style* :thin) ;; :none :thick :thin :tight -- no borders

;; Message window

;;;; Message window gravity
;; ; :top-left :top-right :bottom-left :bottom-right :center
(setq *message-window-gravity* :center)

;;;; Input window gravity
;; ; :top-left :top-right :bottom-left :bottom-right :center
(setq *input-window-gravity* :center)

;; (set-win-bg-color "#222")
;; (set-focus-color "yellow")
;; (set-unfocus-color "#222")

(set-prefix-key (kbd "C-;"))
(define-key *top-map* (kbd "s-Up") "move-focus up")
(define-key *top-map* (kbd "s-Down") "move-focus down")
(define-key *top-map* (kbd "s-Left") "move-focus left")
(define-key *top-map* (kbd "s-Right") "move-focus right")

(define-key *top-map* (kbd "s-M-Up") "pull-hidden-next")
(define-key *top-map* (kbd "s-M-Down") "pull-hidden-previous")
(define-key *top-map* (kbd "s-M-Left") "prev")
(define-key *top-map* (kbd "s-M-Right") "next")

(define-key *top-map* (kbd "C-s-Up") "move-window up")
(define-key *top-map* (kbd "C-s-Down") "move-window down")
(define-key *top-map* (kbd "C-s-Left") "move-window left")
(define-key *top-map* (kbd "C-s-Right") "move-window right")

(define-key *root-map* (kbd "1") "only")
(define-key *root-map* (kbd "2") "vsplit")
(define-key *root-map* (kbd "3") "hsplit")
(define-key *root-map* (kbd "0") "remove-split")
;; (kbd "C-d r") - interactive resize

;; (require :swank)
;; (swank-loader:init)
;; (swank:create-server :port 4004
;; 		     :style swank:*communication-style*
;; 		     :dont-close t)

(defcommand emacs () ()
  "run-or-raise emacs"
  (run-or-raise "emacsclient -ca emacs" '(:class "Emacs")))
(define-key *root-map* (kbd "e") "emacs")

(defcommand browser () ()
  "run or raise qutebrowser"
  (run-or-raise "qutebrowser" '(:class "Qutebrowser")))
(define-key *root-map* (kbd "w") "browser")

(defcommand firefox () ()
  "run or raise firefox"
  (run-or-raise "firefox" '(:class "Firefox")))
(define-key *root-map* (kbd "C-w") "firefox")

(defcommand dmenu_run () ()
  "run or raise dmenu"
  (run-or-raise "dmenu_run" '(:class "dmenu")))
(define-key *root-map* (kbd "C-r") "dmenu_run")

;; (load-module "pass")
;; (setq pass:*password-store* "~/pass")	;The pass:*password-store* variable defines the home directory,”~/.password-store/” by default.
;; (define-key *root-map* (kbd "t") "pass-copy") ;select an entry to put into the clipboard. (Auto-completion is available.)
;; (define-key *root-map* (kbd "t") "pass-copy") ;select an entry from a menu to put into the clipboard.
;; (define-key *root-map* (kbd "t") "pass-generate") ;generate a password for a new given entry and put it into the clipboard.
